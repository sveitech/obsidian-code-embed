/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CodeEmbed
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var CodeEmbed = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerMarkdownCodeBlockProcessor("codefile", (source, el, ctx) => __async(this, null, function* () {
        const { vault } = this.app;
        const rows = source.split("\n").filter((row) => row.length > 0);
        if (rows.length == 0) {
          return;
        }
        ;
        const tokens = rows[0].split(":");
        let filename = "";
        let language = "";
        if (tokens.length == 1) {
          filename = tokens[0];
        } else if (tokens.length == 2) {
          language = tokens[0];
          filename = tokens[1];
        }
        const file = vault.getAbstractFileByPath(filename);
        if (file != null) {
          const fileContents = yield vault.cachedRead(file);
          let markdown = "```" + language;
          markdown += "\r\n";
          markdown += fileContents;
          markdown += "```";
          import_obsidian.MarkdownRenderer.renderMarkdown(markdown, el, "", null);
        } else {
          const pre = el.createEl("pre");
          const code = pre.createEl("code");
          code.innerText = "Could not load file " + filename;
        }
      }));
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blJlbmRlcmVyIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb2RlRW1iZWQgZXh0ZW5kcyBQbHVnaW4ge1xuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKFwiY29kZWZpbGVcIiwgYXN5bmMgKHNvdXJjZSwgZWwsIGN0eCkgPT4ge1xuXHRcdFx0Y29uc3QgeyB2YXVsdCB9ID0gdGhpcy5hcHA7XG5cdFx0XHRjb25zdCByb3dzID0gc291cmNlLnNwbGl0KFwiXFxuXCIpLmZpbHRlcigocm93KSA9PiByb3cubGVuZ3RoID4gMCk7XG5cdFx0XHRcblx0XHRcdGlmIChyb3dzLmxlbmd0aCA9PSAwKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH07XG5cblx0XHRcdGNvbnN0IHRva2VucyA9IHJvd3NbMF0uc3BsaXQoXCI6XCIpO1xuXHRcdFx0bGV0IGZpbGVuYW1lID0gXCJcIlxuXHRcdFx0bGV0IGxhbmd1YWdlID0gXCJcIlxuXG5cdFx0XHRpZiAodG9rZW5zLmxlbmd0aCA9PSAxKSB7XG5cdFx0XHRcdGZpbGVuYW1lID0gdG9rZW5zWzBdO1xuXHRcdFx0fSBlbHNlIGlmKHRva2Vucy5sZW5ndGggPT0gMikge1xuXHRcdFx0XHRsYW5ndWFnZSA9IHRva2Vuc1swXTtcblx0XHRcdFx0ZmlsZW5hbWUgPSB0b2tlbnNbMV07XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNvbnN0IGZpbGUgPSB2YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZW5hbWUpO1xuXG5cdFx0XHRpZiAoZmlsZSAhPSBudWxsKSB7XG5cdFx0XHRcdGNvbnN0IGZpbGVDb250ZW50cyA9IGF3YWl0IHZhdWx0LmNhY2hlZFJlYWQoZmlsZSk7XG5cblx0XHRcdFx0bGV0IG1hcmtkb3duID0gXCJgYGBcIiArIGxhbmd1YWdlO1xuXHRcdFx0XHRtYXJrZG93biArPSBcIlxcclxcblwiO1xuXHRcdFx0XHRtYXJrZG93biArPSBmaWxlQ29udGVudHM7XG5cdFx0XHRcdG1hcmtkb3duICs9IFwiYGBgXCI7XG5cblx0XHRcdFx0TWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bihtYXJrZG93biwgZWwsIFwiXCIsIG51bGwpO1xuXHRcdFx0XHQvL2NvZGUuaW5uZXJUZXh0ID0gZmlsZUNvbnRlbnRzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgcHJlID0gZWwuY3JlYXRlRWwoXCJwcmVcIik7XG5cdFx0XHRcdGNvbnN0IGNvZGUgPSBwcmUuY3JlYXRlRWwoXCJjb2RlXCIpO1xuXG5cdFx0XHRcdGNvZGUuaW5uZXJUZXh0ID0gXCJDb3VsZCBub3QgbG9hZCBmaWxlIFwiICsgZmlsZW5hbWU7XG5cdFx0XHR9XG5cdFx0ICB9KTtcblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXlDO0FBRXpDLElBQXFCLFlBQXJCLGNBQXVDLHVCQUFPO0FBQUEsRUFDN0MsQUFBTSxTQUFTO0FBQUE7QUFDZCxXQUFLLG1DQUFtQyxZQUFZLENBQU8sUUFBUSxJQUFJLFFBQVE7QUFDOUUsY0FBTSxFQUFFLFVBQVUsS0FBSztBQUN2QixjQUFNLE9BQU8sT0FBTyxNQUFNLElBQUksRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLFNBQVMsQ0FBQztBQUU5RCxZQUFJLEtBQUssVUFBVSxHQUFHO0FBQ3JCO0FBQUEsUUFDRDtBQUFDO0FBRUQsY0FBTSxTQUFTLEtBQUssR0FBRyxNQUFNLEdBQUc7QUFDaEMsWUFBSSxXQUFXO0FBQ2YsWUFBSSxXQUFXO0FBRWYsWUFBSSxPQUFPLFVBQVUsR0FBRztBQUN2QixxQkFBVyxPQUFPO0FBQUEsUUFDbkIsV0FBVSxPQUFPLFVBQVUsR0FBRztBQUM3QixxQkFBVyxPQUFPO0FBQ2xCLHFCQUFXLE9BQU87QUFBQSxRQUNuQjtBQUVBLGNBQU0sT0FBTyxNQUFNLHNCQUFzQixRQUFRO0FBRWpELFlBQUksUUFBUSxNQUFNO0FBQ2pCLGdCQUFNLGVBQWUsTUFBTSxNQUFNLFdBQVcsSUFBSTtBQUVoRCxjQUFJLFdBQVcsUUFBUTtBQUN2QixzQkFBWTtBQUNaLHNCQUFZO0FBQ1osc0JBQVk7QUFFWiwyQ0FBaUIsZUFBZSxVQUFVLElBQUksSUFBSSxJQUFJO0FBQUEsUUFFdkQsT0FBTztBQUNOLGdCQUFNLE1BQU0sR0FBRyxTQUFTLEtBQUs7QUFDN0IsZ0JBQU0sT0FBTyxJQUFJLFNBQVMsTUFBTTtBQUVoQyxlQUFLLFlBQVkseUJBQXlCO0FBQUEsUUFDM0M7QUFBQSxNQUNDLEVBQUM7QUFBQSxJQUNKO0FBQUE7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
