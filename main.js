/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CodeEmbed
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var fs = __toESM(require("fs/promises"));
var CodeEmbed = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerMarkdownCodeBlockProcessor("codefile", (source, el, ctx) => __async(this, null, function* () {
        var _a;
        const { vault } = this.app;
        const rows = source.split("\n").filter((row) => row.length > 0);
        if (rows.length == 0) {
          return;
        }
        const filename = rows[0].trim();
        let language = (_a = filename.split(".").pop()) == null ? void 0 : _a.trim();
        let file = vault.getAbstractFileByPath(filename);
        let fileContents;
        let fileExt;
        if (!file) {
          fileContents = yield this.extPath(filename);
          if (fileContents)
            fileExt = "ext";
        }
        if (!fileContents) {
          console.log("not fileContents");
          fileContents = file ? yield vault.cachedRead(file) : "Couldn't find: " + filename;
        }
        if (!file && !fileExt)
          language = "blank";
        let markdown = "```" + language;
        markdown += "\r\n";
        markdown += fileContents;
        if (fileContents.endsWith("\n")) {
          markdown += "```";
        } else {
          markdown += "\n```";
        }
        import_obsidian.MarkdownRenderer.renderMarkdown(markdown, el, "", this);
      }));
    });
  }
  extPath(filename) {
    return __async(this, null, function* () {
      try {
        return yield fs.readFile(filename, "utf8");
      } catch (err) {
        console.error(err);
        return "";
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blJlbmRlcmVyLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnMvcHJvbWlzZXNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvZGVFbWJlZCBleHRlbmRzIFBsdWdpbiB7XHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKFxyXG5cdFx0XHRcImNvZGVmaWxlXCIsXHJcblx0XHRcdGFzeW5jIChzb3VyY2UsIGVsLCBjdHgpID0+IHtcclxuXHRcdFx0XHRjb25zdCB7IHZhdWx0IH0gPSB0aGlzLmFwcDtcclxuXHRcdFx0XHRjb25zdCByb3dzID0gc291cmNlLnNwbGl0KFwiXFxuXCIpLmZpbHRlcigocm93KSA9PiByb3cubGVuZ3RoID4gMCk7XHJcblxyXG5cdFx0XHRcdGlmIChyb3dzLmxlbmd0aCA9PSAwKSB7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRjb25zdCBmaWxlbmFtZSA9IHJvd3NbMF0udHJpbSgpO1xyXG5cdFx0XHRcdGxldCBsYW5ndWFnZSA9IGZpbGVuYW1lLnNwbGl0KFwiLlwiKS5wb3AoKT8udHJpbSgpO1xyXG5cclxuXHRcdFx0XHRsZXQgZmlsZSA9IHZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlbmFtZSkgYXMgVEZpbGU7XHJcblx0XHRcdFx0bGV0IGZpbGVDb250ZW50cztcclxuXHRcdFx0XHRsZXQgZmlsZUV4dDtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZiAoIWZpbGUpIHtcclxuXHRcdFx0XHRcdGZpbGVDb250ZW50cyA9IGF3YWl0IHRoaXMuZXh0UGF0aChmaWxlbmFtZSk7XHJcblx0XHRcdFx0XHRpZiAoZmlsZUNvbnRlbnRzKSBmaWxlRXh0ID0gXCJleHRcIlxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoIWZpbGVDb250ZW50cykge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJub3QgZmlsZUNvbnRlbnRzXCIpO1xyXG5cdFx0XHRcdFx0ZmlsZUNvbnRlbnRzID0gZmlsZVxyXG5cdFx0XHRcdFx0XHQ/IGF3YWl0IHZhdWx0LmNhY2hlZFJlYWQoZmlsZSlcclxuXHRcdFx0XHRcdFx0OiBcIkNvdWxkbid0IGZpbmQ6IFwiICsgZmlsZW5hbWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICghZmlsZSAmJiAhZmlsZUV4dCkgbGFuZ3VhZ2UgPSBcImJsYW5rXCI7IC8vIHRvIHN0YWJpbGl6ZSBlcnJvci1ibG9jayB3aGVuIGVkaXRpbmdcclxuXHRcdFx0XHRsZXQgbWFya2Rvd24gPSBcImBgYFwiICsgbGFuZ3VhZ2U7XHJcblx0XHRcdFx0bWFya2Rvd24gKz0gXCJcXHJcXG5cIjtcclxuXHRcdFx0XHRtYXJrZG93biArPSBmaWxlQ29udGVudHM7XHJcblxyXG5cdFx0XHRcdGlmIChmaWxlQ29udGVudHMuZW5kc1dpdGgoXCJcXG5cIikpIHsgLy8gaWYgdGhlIGZpbGUgZG9lc24ndCBlbmQgd2l0aCBcXG5cclxuXHRcdFx0XHRcdG1hcmtkb3duICs9IFwiYGBgXCI7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdG1hcmtkb3duICs9IFwiXFxuYGBgXCI7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRNYXJrZG93blJlbmRlcmVyLnJlbmRlck1hcmtkb3duKG1hcmtkb3duLCBlbCwgXCJcIiwgdGhpcyk7XHJcblx0XHRcdH1cclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBleHRQYXRoKGZpbGVuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0cmV0dXJuIGF3YWl0IGZzLnJlYWRGaWxlKGZpbGVuYW1lLCBcInV0ZjhcIik7XHJcblx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xyXG5cdFx0XHRyZXR1cm4gXCJcIjtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQWdEO0FBQ2hELFNBQW9CO0FBRXBCLElBQXFCLFlBQXJCLGNBQXVDLHVCQUFPO0FBQUEsRUFDN0MsQUFBTSxTQUFTO0FBQUE7QUFDZCxXQUFLLG1DQUNKLFlBQ0EsQ0FBTyxRQUFRLElBQUksUUFBUTtBQVA5QjtBQVFJLGNBQU0sRUFBRSxVQUFVLEtBQUs7QUFDdkIsY0FBTSxPQUFPLE9BQU8sTUFBTSxJQUFJLEVBQUUsT0FBTyxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUM7QUFFOUQsWUFBSSxLQUFLLFVBQVUsR0FBRztBQUNyQjtBQUFBLFFBQ0Q7QUFFQSxjQUFNLFdBQVcsS0FBSyxHQUFHLEtBQUs7QUFDOUIsWUFBSSxXQUFXLGVBQVMsTUFBTSxHQUFHLEVBQUUsSUFBSSxNQUF4QixtQkFBMkI7QUFFMUMsWUFBSSxPQUFPLE1BQU0sc0JBQXNCLFFBQVE7QUFDL0MsWUFBSTtBQUNKLFlBQUk7QUFFSixZQUFJLENBQUMsTUFBTTtBQUNWLHlCQUFlLE1BQU0sS0FBSyxRQUFRLFFBQVE7QUFDMUMsY0FBSTtBQUFjLHNCQUFVO0FBQUEsUUFDN0I7QUFDQSxZQUFJLENBQUMsY0FBYztBQUNsQixrQkFBUSxJQUFJLGtCQUFrQjtBQUM5Qix5QkFBZSxPQUNaLE1BQU0sTUFBTSxXQUFXLElBQUksSUFDM0Isb0JBQW9CO0FBQUEsUUFDeEI7QUFDQSxZQUFJLENBQUMsUUFBUSxDQUFDO0FBQVMscUJBQVc7QUFDbEMsWUFBSSxXQUFXLFFBQVE7QUFDdkIsb0JBQVk7QUFDWixvQkFBWTtBQUVaLFlBQUksYUFBYSxTQUFTLElBQUksR0FBRztBQUNoQyxzQkFBWTtBQUFBLFFBQ2IsT0FBTztBQUNOLHNCQUFZO0FBQUEsUUFDYjtBQUVBLHlDQUFpQixlQUFlLFVBQVUsSUFBSSxJQUFJLElBQUk7QUFBQSxNQUN2RCxFQUNEO0FBQUEsSUFDRDtBQUFBO0FBQUEsRUFFQSxBQUFNLFFBQVEsVUFBbUM7QUFBQTtBQUNoRCxVQUFJO0FBQ0gsZUFBTyxNQUFNLEFBQUcsWUFBUyxVQUFVLE1BQU07QUFBQSxNQUMxQyxTQUFTLEtBQVA7QUFDRCxnQkFBUSxNQUFNLEdBQUc7QUFDakIsZUFBTztBQUFBLE1BQ1I7QUFBQSxJQUNEO0FBQUE7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
